{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ca971ac4",
   "metadata": {
    "colab_type": "text",
    "id": "Pp7uIANmxDox"
   },
   "source": [
    "# Import Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5a4490be",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:07.244022Z",
     "start_time": "2021-12-27T00:33:05.226757Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 339
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 13585,
     "status": "ok",
     "timestamp": 1588476243809,
     "user": {
      "displayName": "Wang Leo",
      "photoUrl": "",
      "userId": "15935752008260826958"
     },
     "user_tz": -480
    },
    "id": "nHmJU1EDHAuu",
    "outputId": "1002dbe5-94f0-4447-9674-1be62f098005"
   },
   "outputs": [],
   "source": [
    "import gc\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import classification_report\n",
    "import xgboost as xgb\n",
    "import catboost as cat\n",
    "from sklearn.metrics import roc_auc_score, roc_curve, auc\n",
    "# LOCAL_QUICK = True\n",
    "LOCAL_QUICK = False\n",
    "sample_percent = 0.1\n",
    "MORE_FE = False\n",
    "# MORE_FE = True\n",
    "FE_V1 = False if MORE_FE else True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65e51614",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:38.716900Z",
     "start_time": "2021-12-27T00:33:07.336051Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "LcIL6KzTHx7S",
    "outputId": "d5450150-4599-450a-eb9f-ffd00c21e40c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 27.8 s, sys: 3.53 s, total: 31.3 s\n",
      "Wall time: 31.4 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Read data\n",
    "# User behaviors\n",
    "user_log = pd.read_csv('user_log_format1.csv', dtype={'time_stamp': 'str'})\n",
    "\n",
    "user_info = pd.read_csv('user_info_format1.csv')\n",
    "\n",
    "train_data1 = pd.read_csv('train_format1.csv')\n",
    "\n",
    "sub_data = pd.read_csv('test_format1.csv')\n",
    "\n",
    "data_train = pd.read_csv('train_format2.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e65bb6e3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:40.924310Z",
     "start_time": "2021-12-27T00:33:39.274270Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 168
    },
    "colab_type": "code",
    "id": "8v7sOucbg44T",
    "outputId": "b41d2f9d-5f62-44f1-f9e5-4f98bf67ed03"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All sample train\n",
      "---data shape---\n",
      "(54925330, 7)\n",
      "(424170, 3)\n",
      "(260864, 3)\n",
      "(261477, 3)\n",
      "(7030723, 6)\n",
      "CPU times: user 961 ms, sys: 687 ms, total: 1.65 s\n",
      "Wall time: 1.65 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Sample test\n",
    "if LOCAL_QUICK:\n",
    "    print('Local quick test: {}, rate is {}'.format(LOCAL_QUICK,\n",
    "                                                    sample_percent))\n",
    "    data = user_log.sample(int(len(user_log) * sample_percent))\n",
    "    data1 = user_info.sample(int(len(user_info) * sample_percent))\n",
    "    data2 = train_data1.sample(int(len(train_data1) * sample_percent))\n",
    "    submission = sub_data.copy()\n",
    "\n",
    "else:\n",
    "    print('All sample train')\n",
    "    data = user_log.copy()\n",
    "    data1 = user_info.copy()\n",
    "    data2 = train_data1.copy()\n",
    "    submission = sub_data.copy()\n",
    "print('---data shape---')\n",
    "for df in [data, data1, data2, submission, data_train]:\n",
    "    print(df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "eefa5125",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:42.065213Z",
     "start_time": "2021-12-27T00:33:41.828655Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "OT2QGDNkHAu4"
   },
   "outputs": [],
   "source": [
    "data2['origin'] = 'train'\n",
    "submission['origin'] = 'test'\n",
    "matrix = pd.concat([data2, submission], ignore_index=True, sort=False)\n",
    "matrix.drop(['prob'], axis=1, inplace=True)\n",
    "# Merge user_info on user_id\n",
    "matrix = matrix.merge(data1, on='user_id', how='left')\n",
    "# Using merchant_id（Raw column name is seller_id）\n",
    "data.rename(columns={'seller_id': 'merchant_id'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fc4800d1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:58.483121Z",
     "start_time": "2021-12-27T00:33:43.051791Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "Emc8OvZvHAu8",
    "outputId": "5836054e-8a9d-4cdc-d7cc-db1865b4844e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 8.07 s, sys: 5.66 s, total: 13.7 s\n",
      "Wall time: 15.4 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# format\n",
    "data['user_id'] = data['user_id'].astype('int32')\n",
    "data['merchant_id'] = data['merchant_id'].astype('int32')\n",
    "data['item_id'] = data['item_id'].astype('int32')\n",
    "data['cat_id'] = data['cat_id'].astype('int32')\n",
    "data['brand_id'].fillna(0, inplace=True)\n",
    "data['brand_id'] = data['brand_id'].astype('int32')\n",
    "data['time_stamp'] = pd.to_datetime(data['time_stamp'], format='%m%d')\n",
    "# fill na\n",
    "matrix['age_range'].fillna(0, inplace=True)\n",
    "matrix['gender'].fillna(2, inplace=True)\n",
    "\n",
    "# # age : median\n",
    "# matrix['age_range'].fillna(matrix['age_range'].median(),inplace=True)\n",
    "\n",
    "matrix['age_range'] = matrix['age_range'].astype('int8')\n",
    "matrix['gender'] = matrix['gender'].astype('int8')\n",
    "matrix['label'] = matrix['label'].astype('str')\n",
    "matrix['user_id'] = matrix['user_id'].astype('int32')\n",
    "matrix['merchant_id'] = matrix['merchant_id'].astype('int32')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69eae206",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec49ba9a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-21T19:13:34.253112Z",
     "start_time": "2021-12-21T19:13:34.246428Z"
    }
   },
   "source": [
    "## User"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c9df4b41",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:33:59.485202Z",
     "start_time": "2021-12-27T00:33:59.482369Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "2FbHkI6RHAu_",
    "outputId": "f53d20cc-9b15-4778-9f4f-9387fbed316e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 130 µs, sys: 0 ns, total: 130 µs\n",
      "Wall time: 133 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "groups = data.groupby(['user_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6f9223bd",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:34:02.694350Z",
     "start_time": "2021-12-27T00:34:00.489817Z"
    }
   },
   "outputs": [],
   "source": [
    "# Interactive behaviors of users : u1\n",
    "temp = groups.size().reset_index().rename(columns={0: 'u1'})\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ecfe6990",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:35:25.282231Z",
     "start_time": "2021-12-27T00:34:03.735440Z"
    }
   },
   "outputs": [],
   "source": [
    "# Unique value of item_id, cat_id, merchant_id, brand_id for users\n",
    "temp = groups['item_id'].agg([('u2', 'nunique')]).reset_index()\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')\n",
    "temp = groups['cat_id'].agg([('u3', 'nunique')]).reset_index()\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')\n",
    "temp = groups['merchant_id'].agg([('u4', 'nunique')]).reset_index()\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')\n",
    "temp = groups['brand_id'].agg([('u5', 'nunique')]).reset_index()\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "aa7ab5f9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:35:27.201742Z",
     "start_time": "2021-12-27T00:35:26.407920Z"
    }
   },
   "outputs": [],
   "source": [
    "# Time interval : u6 (days/hours)\n",
    "temp = groups['time_stamp'].agg([('F_time', 'min'),\n",
    "                                 ('L_time', 'max')]).reset_index()\n",
    "temp['u6'] = (temp['L_time'] - temp['F_time']).dt.days\n",
    "matrix = matrix.merge(temp[['user_id', 'u6']], on='user_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d597dee9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:35:36.994413Z",
     "start_time": "2021-12-27T00:35:28.350504Z"
    }
   },
   "outputs": [],
   "source": [
    "# count action type 0, 1, 2, 3\n",
    "temp = groups['action_type'].value_counts().unstack().reset_index().rename(\n",
    "    columns={\n",
    "        0: 'u7',\n",
    "        1: 'u8',\n",
    "        2: 'u9',\n",
    "        3: 'u10'\n",
    "    })\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9744fdef",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:35:52.029885Z",
     "start_time": "2021-12-27T00:35:38.268169Z"
    }
   },
   "outputs": [],
   "source": [
    "# Unique value of timestamp\n",
    "temp = groups['time_stamp'].agg([('u11', 'nunique')]).reset_index()\n",
    "matrix = matrix.merge(temp, on='user_id', how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2945980e",
   "metadata": {},
   "source": [
    "## Merchant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "0335130a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-29T01:42:39.142373Z",
     "start_time": "2021-12-29T01:42:39.117658Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 104
    },
    "colab_type": "code",
    "id": "YnvNCjc4HAvC",
    "outputId": "b8dfd4d9-f649-4e74-e695-4e0bf91ffe6e"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 445 µs, sys: 3.9 ms, total: 4.35 ms\n",
      "Wall time: 10.4 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "groups = data.groupby(['merchant_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45887395",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:35:56.227492Z",
     "start_time": "2021-12-27T00:35:54.447453Z"
    }
   },
   "outputs": [],
   "source": [
    "# Interactive behavior of merchant : m1\n",
    "temp = groups.size().reset_index().rename(columns={0: 'm1'})\n",
    "matrix = matrix.merge(temp, on='merchant_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6b7c66aa",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:08.607340Z",
     "start_time": "2021-12-27T00:35:57.431775Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-14-9222372c2dc3>:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  temp = groups['user_id', 'item_id', 'cat_id', 'brand_id'].nunique().reset_index().rename(columns={\n"
     ]
    }
   ],
   "source": [
    "# Unique value of user_id, item_id, cat_id, brand_id for merchants\n",
    "temp = groups['user_id', 'item_id', 'cat_id',\n",
    "              'brand_id'].nunique().reset_index().rename(columns={\n",
    "                  'user_id': 'm2',\n",
    "                  'item_id': 'm3',\n",
    "                  'cat_id': 'm4',\n",
    "                  'brand_id': 'm5'\n",
    "              })\n",
    "matrix = matrix.merge(temp, on='merchant_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f196bf13",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:25.081729Z",
     "start_time": "2021-12-27T00:37:12.628785Z"
    }
   },
   "outputs": [],
   "source": [
    "# Unique value of action_type for merchants\n",
    "temp = groups['action_type'].value_counts().unstack().reset_index().rename(\n",
    "    columns={\n",
    "        0: 'm6',\n",
    "        1: 'm7',\n",
    "        2: 'm8',\n",
    "        3: 'm9'\n",
    "    })\n",
    "matrix = matrix.merge(temp, on='merchant_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e91a055f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:32.973947Z",
     "start_time": "2021-12-27T00:37:29.068599Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "vABAeEfhHAvF"
   },
   "outputs": [],
   "source": [
    "# 按照merchant_id 统计随机负采样的个数\n",
    "temp = data_train[data_train['label'] == -1].groupby(\n",
    "    ['merchant_id']).size().reset_index().rename(columns={0: 'm10'})\n",
    "matrix = matrix.merge(temp, on='merchant_id', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "10678a41",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-29T01:43:06.700983Z",
     "start_time": "2021-12-29T01:42:56.770916Z"
    }
   },
   "outputs": [],
   "source": [
    "temp = groups['time_stamp'].agg([('frist', 'min'),\n",
    "                                 ('last', 'max')]).reset_index()\n",
    "temp['m11'] = (temp['last'] - temp['frist']).dt.days\n",
    "temp.drop(['frist', 'last'], axis=1, inplace=True)\n",
    "matrix = matrix.merge(temp, on=['merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "96317309",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:59:17.253541Z",
     "start_time": "2021-12-27T00:59:15.616706Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id  merchant_id  cat_id\n",
       "1        925          1023      1\n",
       "         1019         992       4\n",
       "         4026         1252      1\n",
       "2        420          602       2\n",
       "                      1213      1\n",
       "                               ..\n",
       "424169   3760         662       1\n",
       "         3898         351       3\n",
       "                      812       1\n",
       "         4731         351       1\n",
       "424170   4268         656       1\n",
       "Length: 2610210, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data['action_type'] == 2].groupby(['user_id', 'merchant_id',\n",
    "                                        'cat_id']).size()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc4875ab",
   "metadata": {},
   "source": [
    "## User + Merchant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "5e16a8a8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:01:16.141701Z",
     "start_time": "2021-12-27T01:01:16.138178Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 104
    },
    "colab_type": "code",
    "id": "n9FRm4FyHAvI",
    "outputId": "800ce225-0731-4d10-8c55-4b7cac22a4d8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 187 µs, sys: 1e+03 ns, total: 188 µs\n",
      "Wall time: 192 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "groups = data.groupby(['user_id', 'merchant_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9d1bd04",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.005094Z",
     "start_time": "2021-12-27T00:33:46.598Z"
    }
   },
   "outputs": [],
   "source": [
    "# count interactive behaviors\n",
    "temp = groups.size().reset_index().rename(columns={0: 'um1'})\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d14fe324",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.035025Z",
     "start_time": "2021-12-27T00:33:46.844Z"
    }
   },
   "outputs": [],
   "source": [
    "# Unique value for item_id, cat_id, brand_id\n",
    "temp = groups['item_id', 'cat_id',\n",
    "              'brand_id'].nunique().reset_index().rename(columns={\n",
    "                  'item_id': 'um2',\n",
    "                  'cat_id': 'um3',\n",
    "                  'brand_id': 'um4'\n",
    "              })\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "97f950a8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.063528Z",
     "start_time": "2021-12-27T00:33:47.064Z"
    }
   },
   "outputs": [],
   "source": [
    "# Count each action_type\n",
    "temp = groups['action_type'].value_counts().unstack().reset_index().rename(\n",
    "    columns={\n",
    "        0: 'um5',\n",
    "        1: 'um6',\n",
    "        2: 'um7',\n",
    "        3: 'um8'\n",
    "    })\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1b3cdfc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.088694Z",
     "start_time": "2021-12-27T00:33:47.324Z"
    }
   },
   "outputs": [],
   "source": [
    "# Time interval (days/hours)\n",
    "temp = groups['time_stamp'].agg([('frist', 'min'),\n",
    "                                 ('last', 'max')]).reset_index()\n",
    "temp['um9'] = (temp['last'] - temp['frist']).dt.days\n",
    "temp.drop(['frist', 'last'], axis=1, inplace=True)\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2e0716d6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:03:03.042625Z",
     "start_time": "2021-12-27T01:02:53.169218Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-33-ef3ab58decc5>:2: FutureWarning: Indexing with multiple keys (implicitly converted to a tuple of keys) will be deprecated, use a list instead.\n",
      "  temp = groups['item_id', 'cat_id', 'brand_id'].nunique().reset_index().rename(columns={\n"
     ]
    }
   ],
   "source": [
    "groups = data[data['action_type'] == 2].groupby(['user_id', 'merchant_id'])\n",
    "temp = groups['item_id'].nunique().reset_index().rename(\n",
    "    columns={'item_id': 'um10'})\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db782f82",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.112306Z",
     "start_time": "2021-12-27T00:33:47.815Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "bq0Ss1SvHAvK"
   },
   "outputs": [],
   "source": [
    "# User purchase/click\n",
    "matrix['r1'] = matrix['u9'] / matrix['u7']\n",
    "\n",
    "# Merchant purchase/click\n",
    "matrix['r2'] = matrix['m8'] / matrix['m6']\n",
    "\n",
    "# U+M purchase/click\n",
    "matrix['r3'] = matrix['um7'] / matrix['um5']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "488c3811",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.135880Z",
     "start_time": "2021-12-27T00:33:49.668Z"
    }
   },
   "outputs": [],
   "source": [
    "# U+M daily click\n",
    "matrix['r4'] = matrix['u7'] / (matrix['u6'])\n",
    "\n",
    "# U+M daily purchase\n",
    "matrix['r5'] = matrix['u9'] / (matrix['u6'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b0cb03ea",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.160760Z",
     "start_time": "2021-12-27T00:33:50.070Z"
    }
   },
   "outputs": [],
   "source": [
    "# U+M daily click\n",
    "matrix['r6'] = matrix['um5'] / (matrix['um9'] + 1)\n",
    "\n",
    "# U+M daily purchase\n",
    "matrix['r7'] = matrix['um7'] / (matrix['um9'] + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c0c5cae",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.186952Z",
     "start_time": "2021-12-27T00:33:50.532Z"
    }
   },
   "outputs": [],
   "source": [
    "# U+M daily click\n",
    "matrix['r8'] = matrix['um2'] / (matrix['um7'])\n",
    "\n",
    "# U+M daily purchase\n",
    "matrix['r9'] = matrix['um3'] / (matrix['um7'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0438d315",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.210563Z",
     "start_time": "2021-12-27T00:33:51.854Z"
    }
   },
   "outputs": [],
   "source": [
    "# U+M daily click\n",
    "matrix['r10'] = matrix['um2'] / (matrix['um9'] + 1)\n",
    "\n",
    "# U+M daily purchase\n",
    "matrix['r11'] = matrix['um3'] / (matrix['um9'] + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "53a13c00",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:04:17.652566Z",
     "start_time": "2021-12-27T01:04:16.702026Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "r1RSi-7_HAvN"
   },
   "outputs": [],
   "source": [
    "# Fillna 0\n",
    "matrix.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cbbb4c1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:37:42.270420Z",
     "start_time": "2021-12-27T00:33:56.230Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "fFr7DhmAHAvP",
    "outputId": "3f308416-f212-481f-e9c3-41fbe8a364a8"
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "# Make dummy variables of age_range\n",
    "temp = pd.get_dummies(matrix['age_range'], prefix='age')\n",
    "matrix = pd.concat([matrix, temp], axis=1)\n",
    "\n",
    "# Make dummy variables of gender\n",
    "temp = pd.get_dummies(matrix['gender'], prefix='g')\n",
    "matrix = pd.concat([matrix, temp], axis=1)\n",
    "matrix.drop(['age_range', 'gender'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "1f07b6ec",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-29T02:14:29.751775Z",
     "start_time": "2021-12-29T02:13:32.035698Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "-1cqxyEpHAvS",
    "outputId": "c523e9a4-acf4-426e-9387-84f816b03e2a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 55 s, sys: 1.84 s, total: 56.9 s\n",
      "Wall time: 57.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# train, test data\n",
    "train_data = matrix[matrix['origin'] == 'train'].drop(['origin'], axis=1)\n",
    "test_data = matrix[matrix['origin'] == 'test'].drop(['label', 'origin'],\n",
    "                                                    axis=1)\n",
    "\n",
    "if not LOCAL_QUICK:\n",
    "    if FE_V1:\n",
    "        train_data.to_csv('train_data.csv')\n",
    "        test_data.to_csv('test_data.csv')\n",
    "    if MORE_FE:\n",
    "        train_data.to_csv('train_data_moreFE.csv')\n",
    "        test_data.to_csv('test_data_moreFE.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "7ac2d447",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-21T20:21:24.657768Z",
     "start_time": "2021-12-21T20:21:24.371673Z"
    }
   },
   "outputs": [],
   "source": [
    "# # matrix['u6']=np.log(matrix['u6_x'])\n",
    "# matrix['um9']=np.log(matrix['um9_y']+1)\n",
    "# matrix.drop(['um9_x','um9_y'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "e1c97ba7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:46:11.877766Z",
     "start_time": "2021-12-27T01:46:11.471165Z"
    }
   },
   "outputs": [],
   "source": [
    "matrix = pd.read_pickle('matrix_2.pkl')\n",
    "# matrix.drop('Unnamed: 0',inplace=True,axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b33f1c76",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:38:23.585665Z",
     "start_time": "2021-12-27T00:37:57.225443Z"
    }
   },
   "outputs": [],
   "source": [
    "matrix.drop(['um9', 'u6'], axis=1, inplace=True)\n",
    "groups = data.groupby(['user_id'])\n",
    "temp = groups['time_stamp'].agg([('F_time', 'min'),\n",
    "                                 ('L_time', 'max')]).reset_index()\n",
    "temp['u6'] = (temp['L_time'] - temp['F_time']).dt.days\n",
    "matrix = matrix.merge(temp[['user_id', 'u6']], on='user_id', how='left')\n",
    "\n",
    "groups = data.groupby(['merchant_id'])\n",
    "temp = groups['time_stamp'].agg([('frist', 'min'),\n",
    "                                 ('last', 'max')]).reset_index()\n",
    "temp['m11'] = (temp['last'] - temp['frist']).dt.days\n",
    "temp.drop(['frist', 'last'], axis=1, inplace=True)\n",
    "matrix = matrix.merge(temp, on=['merchant_id'], how='left')\n",
    "\n",
    "groups = data.groupby(['user_id', 'merchant_id'])\n",
    "temp = groups['time_stamp'].agg([('frist', 'min'),\n",
    "                                 ('last', 'max')]).reset_index()\n",
    "temp['um9'] = (temp['last'] - temp['frist']).dt.days\n",
    "temp.drop(['frist', 'last'], axis=1, inplace=True)\n",
    "matrix = matrix.merge(temp, on=['user_id', 'merchant_id'], how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2bafcad4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:38:27.913436Z",
     "start_time": "2021-12-27T00:38:26.734923Z"
    }
   },
   "outputs": [],
   "source": [
    "matrix['u12'] = matrix['u6'] + matrix['u7'] + matrix['u8'] + matrix['u9']\n",
    "\n",
    "matrix['r4'] = matrix['u8'] / matrix['u6']\n",
    "matrix['r5'] = matrix['u8'] / matrix['u7']\n",
    "matrix['r6'] = matrix['u8'] / matrix['u9']\n",
    "matrix['r7'] = matrix['u9'] / matrix['u6']\n",
    "matrix['r8'] = matrix['u7'] / matrix['u6']\n",
    "matrix['r9'] = matrix['u2'] / matrix['u3']\n",
    "matrix['r10'] = matrix['u2'] / matrix['u4']\n",
    "matrix['r11'] = matrix['u4'] / matrix['u2']\n",
    "matrix['r12'] = matrix['m4'] / matrix['m3']\n",
    "matrix['r13'] = matrix['m4'] / matrix['m5']\n",
    "matrix['r14'] = matrix['m9'] / matrix['m6']\n",
    "matrix['r15'] = matrix['m7'] / matrix['m6']\n",
    "matrix['r16'] = matrix['m8'] / matrix['m7']\n",
    "matrix['r17'] = matrix['um3'] / matrix['um2']\n",
    "matrix['r18'] = matrix['um4'] / matrix['um2']\n",
    "matrix['r19'] = matrix['um6'] / matrix['um5']\n",
    "matrix['r20'] = matrix['um8'] / matrix['um5']\n",
    "matrix['r21'] = matrix['u12'] / matrix['u10']\n",
    "matrix['r22'] = matrix['u6'] / matrix['u10']\n",
    "matrix['r23'] = matrix['u7'] / matrix['u10']\n",
    "matrix['r24'] = matrix['u8'] / matrix['u10']\n",
    "matrix['r25'] = matrix['u9'] / matrix['u10']\n",
    "\n",
    "matrix['ri1'] = matrix['i2_y'] / matrix['i0_y']\n",
    "matrix['ri2'] = matrix['i1_y'] / matrix['i0_y']\n",
    "matrix['ri3'] = matrix['i3_y'] / matrix['i0_y']\n",
    "\n",
    "# split train and test\n",
    "matrix.fillna(0, inplace=True)\n",
    "matrix.replace(np.inf, 0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fd6ef76c",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T00:38:30.236452Z",
     "start_time": "2021-12-27T00:38:30.205113Z"
    }
   },
   "outputs": [],
   "source": [
    "# U+M\n",
    "matrix['r26'] = matrix['um2'] / (matrix['um7'])\n",
    "matrix['r27'] = matrix['um3'] / (matrix['um7'])\n",
    "matrix['r28'] = matrix['um2'] / (matrix['um9'] + 1)\n",
    "matrix['r29'] = matrix['um3'] / (matrix['um9'] + 1)\n",
    "\n",
    "matrix['r30'] = matrix['um7'] / matrix['um1']\n",
    "matrix['r31'] = matrix['um2'] / (matrix['um1'])\n",
    "matrix['r32'] = matrix['um3'] / (matrix['um1'])\n",
    "matrix['r33'] = matrix['um1'] / (matrix['um9'] + 1)\n",
    "matrix['r34'] = matrix['um4'] / (matrix['um9'] + 1)\n",
    "matrix['r35'] = matrix['um10'] / (matrix['um9'] + 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "50667431",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-29T02:12:03.684450Z",
     "start_time": "2021-12-29T02:12:03.196474Z"
    }
   },
   "outputs": [],
   "source": [
    "matrix.drop(['age_0', 'age_7'], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "f005a788",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:45:10.959630Z",
     "start_time": "2021-12-27T01:45:10.729789Z"
    }
   },
   "outputs": [],
   "source": [
    "matrix.to_pickle('matrix_2.pkl')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "6bf3bd4f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-29T02:12:21.561555Z",
     "start_time": "2021-12-29T02:12:21.402141Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>merchant_id</th>\n",
       "      <th>label</th>\n",
       "      <th>origin</th>\n",
       "      <th>u1</th>\n",
       "      <th>u2</th>\n",
       "      <th>u3</th>\n",
       "      <th>u4</th>\n",
       "      <th>u5</th>\n",
       "      <th>u7</th>\n",
       "      <th>...</th>\n",
       "      <th>r27</th>\n",
       "      <th>r28</th>\n",
       "      <th>r29</th>\n",
       "      <th>r30</th>\n",
       "      <th>r31</th>\n",
       "      <th>r32</th>\n",
       "      <th>r33</th>\n",
       "      <th>r34</th>\n",
       "      <th>um10</th>\n",
       "      <th>r35</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34176</td>\n",
       "      <td>3906</td>\n",
       "      <td>0.0</td>\n",
       "      <td>train</td>\n",
       "      <td>451</td>\n",
       "      <td>256</td>\n",
       "      <td>109</td>\n",
       "      <td>45</td>\n",
       "      <td>108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>0.869565</td>\n",
       "      <td>0.26087</td>\n",
       "      <td>0.025641</td>\n",
       "      <td>0.512821</td>\n",
       "      <td>0.153846</td>\n",
       "      <td>1.695652</td>\n",
       "      <td>0.043478</td>\n",
       "      <td>1</td>\n",
       "      <td>0.043478</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>34176</td>\n",
       "      <td>121</td>\n",
       "      <td>0.0</td>\n",
       "      <td>train</td>\n",
       "      <td>451</td>\n",
       "      <td>256</td>\n",
       "      <td>109</td>\n",
       "      <td>45</td>\n",
       "      <td>108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.071429</td>\n",
       "      <td>0.071429</td>\n",
       "      <td>0.071429</td>\n",
       "      <td>3.500000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34176</td>\n",
       "      <td>4356</td>\n",
       "      <td>1.0</td>\n",
       "      <td>train</td>\n",
       "      <td>451</td>\n",
       "      <td>256</td>\n",
       "      <td>109</td>\n",
       "      <td>45</td>\n",
       "      <td>108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.50000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.055556</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>34176</td>\n",
       "      <td>2217</td>\n",
       "      <td>0.0</td>\n",
       "      <td>train</td>\n",
       "      <td>451</td>\n",
       "      <td>256</td>\n",
       "      <td>109</td>\n",
       "      <td>45</td>\n",
       "      <td>108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>230784</td>\n",
       "      <td>4818</td>\n",
       "      <td>0.0</td>\n",
       "      <td>train</td>\n",
       "      <td>54</td>\n",
       "      <td>31</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "      <td>19</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.25000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522336</th>\n",
       "      <td>228479</td>\n",
       "      <td>3111</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>2004</td>\n",
       "      <td>1173</td>\n",
       "      <td>278</td>\n",
       "      <td>71</td>\n",
       "      <td>282</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.50000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>2.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522337</th>\n",
       "      <td>97919</td>\n",
       "      <td>2341</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>55</td>\n",
       "      <td>29</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522338</th>\n",
       "      <td>97919</td>\n",
       "      <td>3971</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>55</td>\n",
       "      <td>29</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.20000</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.312500</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.100000</td>\n",
       "      <td>3</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522339</th>\n",
       "      <td>32639</td>\n",
       "      <td>3536</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>72</td>\n",
       "      <td>46</td>\n",
       "      <td>33</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522340</th>\n",
       "      <td>32639</td>\n",
       "      <td>3319</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>72</td>\n",
       "      <td>46</td>\n",
       "      <td>33</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.50000</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>0.090909</td>\n",
       "      <td>5.500000</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>522341 rows × 147 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        user_id  merchant_id  label origin    u1    u2   u3  u4   u5   u7  \\\n",
       "0         34176         3906    0.0  train   451   256  109  45  108  0.0   \n",
       "1         34176          121    0.0  train   451   256  109  45  108  0.0   \n",
       "2         34176         4356    1.0  train   451   256  109  45  108  0.0   \n",
       "3         34176         2217    0.0  train   451   256  109  45  108  0.0   \n",
       "4        230784         4818    0.0  train    54    31   20  17   19  0.0   \n",
       "...         ...          ...    ...    ...   ...   ...  ...  ..  ...  ...   \n",
       "522336   228479         3111    0.0   test  2004  1173  278  71  282  0.0   \n",
       "522337    97919         2341    0.0   test    55    29   17  14   17  0.0   \n",
       "522338    97919         3971    0.0   test    55    29   17  14   17  0.0   \n",
       "522339    32639         3536    0.0   test    72    46   33  24   35  1.0   \n",
       "522340    32639         3319    0.0   test    72    46   33  24   35  1.0   \n",
       "\n",
       "        ...       r27       r28      r29       r30       r31       r32  \\\n",
       "0       ...  6.000000  0.869565  0.26087  0.025641  0.512821  0.153846   \n",
       "1       ...  1.000000  0.250000  0.25000  0.071429  0.071429  0.071429   \n",
       "2       ...  0.166667  1.000000  0.50000  0.333333  0.111111  0.055556   \n",
       "3       ...  1.000000  1.000000  1.00000  0.500000  0.500000  0.500000   \n",
       "4       ...  1.000000  0.250000  0.25000  0.125000  0.125000  0.125000   \n",
       "...     ...       ...       ...      ...       ...       ...       ...   \n",
       "522336  ...  1.000000  1.000000  0.50000  0.200000  0.400000  0.200000   \n",
       "522337  ...  1.000000  1.000000  1.00000  0.500000  0.500000  0.500000   \n",
       "522338  ...  0.500000  0.500000  0.20000  0.250000  0.312500  0.125000   \n",
       "522339  ...  1.000000  2.000000  1.00000  0.333333  0.666667  0.333333   \n",
       "522340  ...  1.000000  0.500000  0.50000  0.090909  0.090909  0.090909   \n",
       "\n",
       "             r33       r34  um10       r35  \n",
       "0       1.695652  0.043478     1  0.043478  \n",
       "1       3.500000  0.250000     1  0.250000  \n",
       "2       9.000000  0.500000     2  1.000000  \n",
       "3       2.000000  1.000000     1  1.000000  \n",
       "4       2.000000  0.250000     1  0.250000  \n",
       "...          ...       ...   ...       ...  \n",
       "522336  2.500000  0.500000     1  0.500000  \n",
       "522337  2.000000  1.000000     1  1.000000  \n",
       "522338  1.600000  0.100000     3  0.300000  \n",
       "522339  3.000000  1.000000     1  1.000000  \n",
       "522340  5.500000  0.500000     1  0.500000  \n",
       "\n",
       "[522341 rows x 147 columns]"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5dba069",
   "metadata": {
    "colab_type": "text",
    "id": "lWOUo9DVPiGa"
   },
   "source": [
    "# Models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "141a37ca",
   "metadata": {},
   "source": [
    "## Read feature data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "0958a9b4",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:56:36.717192Z",
     "start_time": "2021-12-27T01:56:27.098113Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "50VkvAJcHAvV"
   },
   "outputs": [],
   "source": [
    "# Read data\n",
    "if not LOCAL_QUICK:\n",
    "    if FE_V1:\n",
    "        train_data = pd.read_csv('train_data.csv')\n",
    "        test_data = pd.read_csv('test_data.csv')\n",
    "    if MORE_FE:\n",
    "        train_data = pd.read_csv('train_data_moreFE.csv')\n",
    "        test_data = pd.read_csv('test_data_moreFE.csv')\n",
    "\n",
    "# FeatureSelect_QUICK = True # Feature Select\n",
    "FeatureSelect_QUICK = False\n",
    "if FeatureSelect_QUICK:  # Use part of samples to select features quickly\n",
    "    train_data = train_data.sample(int(len(train_data) * sample_percent))\n",
    "\n",
    "# train_data = train_data[train_col]\n",
    "train_X, train_y = train_data.drop(['label'], axis=1), train_data['label']\n",
    "\n",
    "# train_test_split\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(\n",
    "    train_X, train_y, test_size=.2, random_state=42)  # test_size=.3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b6e7981",
   "metadata": {
    "colab_type": "text",
    "id": "yqaIdRNDxRjj"
   },
   "source": [
    "## Try"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41f3540e",
   "metadata": {},
   "source": [
    "### XGBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "d60f4e35",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:56:44.772883Z",
     "start_time": "2021-12-27T01:56:44.219189Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "3luWffkDRW4D"
   },
   "outputs": [],
   "source": [
    "# Read data\n",
    "train_X, train_y = train_data.drop(['label'], axis=1), train_data['label']\n",
    "X_train, X_valid, y_train, y_valid = train_test_split(\n",
    "    train_X, train_y, test_size=.2, random_state=42)  # test_size=.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "8b158bde",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:56:52.192685Z",
     "start_time": "2021-12-27T01:56:52.184647Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "17s8JUMYHAvi",
    "outputId": "ea67e253-a58c-45bd-d9c7-ce7315cfc011"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3 µs, sys: 1e+03 ns, total: 4 µs\n",
      "Wall time: 7.15 µs\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "def xgb_train(X_train, y_train, X_valid, y_valid, verbose=True):\n",
    "    model_xgb = xgb.XGBClassifier(\n",
    "        max_depth=6,  # raw8\n",
    "        n_estimators=1000,\n",
    "        min_child_weight=300,\n",
    "        colsample_bytree=0.8,\n",
    "        subsample=0.8,\n",
    "        eta=0.3,\n",
    "        seed=42)\n",
    "\n",
    "    model_xgb.fit(X_train,\n",
    "                  y_train,\n",
    "                  eval_metric='auc',\n",
    "                  eval_set=[(X_train, y_train), (X_valid, y_valid)],\n",
    "                  verbose=verbose,\n",
    "                  early_stopping_rounds=10)\n",
    "    print(model_xgb.best_score)\n",
    "    return model_xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "a6b9f588",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:57:12.837381Z",
     "start_time": "2021-12-27T01:56:59.319185Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "ephCxUW5bUOt",
    "outputId": "1e6da369-bc25-46fc-cb58-ea7f482b20d7"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yduanmu/opt/anaconda3/lib/python3.8/site-packages/xgboost/sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.686327\n"
     ]
    }
   ],
   "source": [
    "model_xgb = xgb_train(X_train, y_train, X_valid, y_valid, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e87a55c7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-25T02:11:44.450611Z",
     "start_time": "2021-12-25T02:11:43.665018Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "pZvHurIDHAvj",
    "outputId": "6b5ebd6b-4f5c-4f59-9ce2-4f555f645961",
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3.45 s, sys: 1.75 s, total: 5.2 s\n",
      "Wall time: 782 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "prob = model_xgb.predict_proba(test_data)\n",
    "submission['prob'] = pd.Series(prob[:, 1])\n",
    "submission.drop(['origin'], axis=1, inplace=True)\n",
    "submission.to_csv('submission_xgb.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a636bd70",
   "metadata": {
    "colab_type": "text",
    "id": "VE73pxHEtY_r"
   },
   "source": [
    "### Cat Boost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "a996cf04",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-25T02:11:48.134887Z",
     "start_time": "2021-12-25T02:11:48.130738Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "8hWUQDp2t_tr"
   },
   "outputs": [],
   "source": [
    "def cat_train(X_train, y_train, X_valid, y_valid, verbose=True):\n",
    "    model_cat = cat.CatBoostClassifier(learning_rate=0.02,\n",
    "                                       iterations=5000,\n",
    "                                       eval_metric='AUC',\n",
    "                                       od_wait=50,\n",
    "                                       od_type='Iter',\n",
    "                                       random_state=10,\n",
    "                                       thread_count=8,\n",
    "                                       l2_leaf_reg=1,\n",
    "                                       verbose=verbose)\n",
    "    model_cat.fit(X_train,\n",
    "                  y_train,\n",
    "                  eval_set=[(X_valid, y_valid)],\n",
    "                  early_stopping_rounds=50,\n",
    "                  use_best_model=True)\n",
    "\n",
    "    print(model_cat.best_score_['validation']['AUC'])\n",
    "    return model_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7f30bbd7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-25T02:12:10.418434Z",
     "start_time": "2021-12-25T02:11:51.728577Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 34
    },
    "colab_type": "code",
    "id": "Jsn3fl0avds1",
    "outputId": "56e8515a-21bb-4169-bded-2945c60e4ef1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6837380737296375\n"
     ]
    }
   ],
   "source": [
    "model_cat = cat_train(X_train, y_train, X_valid, y_valid, verbose=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "76f7142e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-25T02:12:14.722992Z",
     "start_time": "2021-12-25T02:12:14.082115Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 50
    },
    "colab_type": "code",
    "id": "sCfec6TrxK_A",
    "outputId": "bfae6027-a577-48b6-f163-a7180ffda7f8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.16 s, sys: 69.2 ms, total: 1.23 s\n",
      "Wall time: 638 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "prob = model_cat.predict_proba(test_data)\n",
    "submission['prob'] = pd.Series(prob[:, 1])\n",
    "# submission.drop(['origin'], axis=1, inplace=True)\n",
    "submission.to_csv('submission_cat.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6d24c2e",
   "metadata": {
    "colab_type": "text",
    "id": "AvMQL3-Mb4cA"
   },
   "source": [
    "## StratifiedKFold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "bb01650b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T01:59:34.267296Z",
     "start_time": "2021-12-27T01:59:34.255358Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "pdGoRvWOlbqv"
   },
   "outputs": [],
   "source": [
    "# Make Train set and Test set\n",
    "def get_train_testDF(train_df, label_df):\n",
    "    skv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n",
    "    trainX = []\n",
    "    trainY = []\n",
    "    testX = []\n",
    "    testY = []\n",
    "    for train_index, test_index in skv.split(X=train_df, y=label_df):\n",
    "        train_x, train_y, test_x, test_y = train_df.iloc[train_index, :], label_df.iloc[train_index], \\\n",
    "                                            train_df.iloc[test_index, :], label_df.iloc[test_index]\n",
    "\n",
    "        trainX.append(train_x)\n",
    "        trainY.append(train_y)\n",
    "        testX.append(test_x)\n",
    "        testY.append(test_y)\n",
    "    return trainX, testX, trainY, testY"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d04360a",
   "metadata": {},
   "source": [
    "## Final Model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d0b2596",
   "metadata": {},
   "source": [
    "### LightGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a7f83d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read data\n",
    "if not LOCAL_QUICK:\n",
    "    if FE_V1:\n",
    "        train_data = pd.read_csv('train_data.csv')\n",
    "        test_data = pd.read_csv('test_data.csv')\n",
    "    if MORE_FE:\n",
    "        train_data = pd.read_csv('train_data_moreFE.csv')\n",
    "        test_data = pd.read_csv('test_data_moreFE.csv')\n",
    "\n",
    "train_X, train_y = train_data.drop(['label'], axis=1), train_data['label']\n",
    "\n",
    "# Split Train&Valid Data\n",
    "X_train, X_valid, y_train, y_valid = get_train_testDF(train_X, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "ab14943a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2022-01-08T06:31:07.991429Z",
     "start_time": "2022-01-08T06:23:38.692906Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================LGB training use Data 1/5============================\n",
      "\n",
      "0.6950528930867641\n",
      "\n",
      "============================LGB training use Data 2/5============================\n",
      "\n",
      "0.6951859185743989\n",
      "\n",
      "============================LGB training use Data 3/5============================\n",
      "\n",
      "0.6889699925071766\n",
      "\n",
      "============================LGB training use Data 4/5============================\n",
      "\n",
      "0.6926655985690021\n",
      "\n",
      "============================LGB training use Data 5/5============================\n",
      "\n",
      "0.6928138338579753\n",
      "               0         0         0         0         0\n",
      "0       0.429448  0.362807  0.413791  0.430574  0.429927\n",
      "1       0.507550  0.483903  0.506083  0.558445  0.501370\n",
      "2       0.426781  0.368000  0.486253  0.418441  0.488253\n",
      "3       0.271171  0.255585  0.281039  0.248218  0.230383\n",
      "4       0.402136  0.372530  0.338543  0.342509  0.318103\n",
      "...          ...       ...       ...       ...       ...\n",
      "261472  0.458283  0.419896  0.435266  0.481487  0.360560\n",
      "261473  0.139406  0.171347  0.197168  0.138879  0.147234\n",
      "261474  0.517556  0.545648  0.498689  0.475901  0.484735\n",
      "261475  0.319972  0.281433  0.278488  0.279710  0.363208\n",
      "261476  0.422237  0.418251  0.423366  0.403213  0.442515\n",
      "\n",
      "[261477 rows x 5 columns]\n"
     ]
    }
   ],
   "source": [
    "# 将训练数据集划分分别训练5个lgbm,xgboost和catboost 模型\n",
    "# lightgbm模型\n",
    "\n",
    "pred_lgbms = []\n",
    "for i in range(5):\n",
    "    print(\n",
    "        '\\n============================LGB training use Data {}/5============================\\n'\n",
    "        .format(i + 1))\n",
    "    model_lgb = lgb.LGBMClassifier(\n",
    "        boosting_type='GOSS',\n",
    "        max_depth=12,  # 8\n",
    "        num_leaves=22,\n",
    "        n_estimators=5000,\n",
    "        min_child_weight=200,\n",
    "        class_weight={\n",
    "            1: 0.9,\n",
    "            0: 0.1\n",
    "        },\n",
    "        colsample_bytree=0.78,\n",
    "        subsample=0.8,\n",
    "        learning_rate=0.007,\n",
    "        seed=42,\n",
    "        n_jobs=8)\n",
    "\n",
    "    model_lgb.fit(X_train[i],\n",
    "                  y_train[i],\n",
    "                  eval_metric='auc',\n",
    "                  eval_set=[(X_train[i], y_train[i]),\n",
    "                            (X_valid[i], y_valid[i])],\n",
    "                  verbose=False,\n",
    "                  early_stopping_rounds=300)\n",
    "\n",
    "    print(model_lgb.best_score_['valid_1']['auc'])\n",
    "\n",
    "    pred = model_lgb.predict_proba(test_data)\n",
    "    pred = pd.DataFrame(pred[:, 1])\n",
    "    pred_lgbms.append(pred)\n",
    "pred_lgbms = pd.concat(pred_lgbms, axis=1)\n",
    "print(pred_lgbms)\n",
    "\n",
    "submission['prob'] = pred_lgbms.mean(axis=1)\n",
    "# submission.drop(['origin'], axis=1, inplace=True)\n",
    "submission.to_csv('submission_KFold_lgb.csv', index=False)\n",
    "\n",
    "####0.6959"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "981b9fc5",
   "metadata": {
    "colab_type": "text",
    "id": "Mh8hsgKgWow2"
   },
   "source": [
    "### Catgbm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "15f73406",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T02:31:00.287292Z",
     "start_time": "2021-12-27T02:30:50.582137Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "RH095k2_Y2ec"
   },
   "outputs": [],
   "source": [
    "# get data\n",
    "if not LOCAL_QUICK:\n",
    "    if FE_V1:\n",
    "        train_data = pd.read_csv('train_data.csv')\n",
    "        test_data = pd.read_csv('test_data.csv')\n",
    "    if MORE_FE:\n",
    "        train_data = pd.read_csv('train_data_moreFE.csv')\n",
    "        test_data = pd.read_csv('test_data_moreFE.csv')\n",
    "\n",
    "train_X, train_y = train_data.drop(['label'], axis=1), train_data['label']\n",
    "\n",
    "# Split Train&Valid Data\n",
    "X_train, X_valid, y_train, y_valid = get_train_testDF(train_X, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "c7a7bd77",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T02:56:32.197872Z",
     "start_time": "2021-12-27T02:41:54.000224Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 353
    },
    "colab_type": "code",
    "id": "zN_dhID6qOsD",
    "outputId": "172b1b75-e5ad-4f08-dbfd-d1ccb3b985dc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================CAT training use Data 1/5============================\n",
      "\n",
      "0:\ttest: 0.5620029\tbest: 0.5620029 (0)\ttotal: 46.2ms\tremaining: 3m 51s\n",
      "100:\ttest: 0.6471123\tbest: 0.6472451 (99)\ttotal: 4.33s\tremaining: 3m 30s\n",
      "200:\ttest: 0.6540673\tbest: 0.6540673 (200)\ttotal: 8.52s\tremaining: 3m 23s\n",
      "300:\ttest: 0.6615788\tbest: 0.6615788 (300)\ttotal: 12.6s\tremaining: 3m 16s\n",
      "400:\ttest: 0.6678866\tbest: 0.6678866 (400)\ttotal: 16.4s\tremaining: 3m 8s\n",
      "500:\ttest: 0.6727801\tbest: 0.6727801 (500)\ttotal: 20.3s\tremaining: 3m 2s\n",
      "600:\ttest: 0.6759959\tbest: 0.6759959 (600)\ttotal: 24.2s\tremaining: 2m 56s\n",
      "700:\ttest: 0.6785302\tbest: 0.6785302 (700)\ttotal: 28s\tremaining: 2m 51s\n",
      "800:\ttest: 0.6804415\tbest: 0.6804415 (800)\ttotal: 31.8s\tremaining: 2m 46s\n",
      "900:\ttest: 0.6821157\tbest: 0.6821157 (900)\ttotal: 35.8s\tremaining: 2m 42s\n",
      "1000:\ttest: 0.6835887\tbest: 0.6835887 (1000)\ttotal: 39.7s\tremaining: 2m 38s\n",
      "1100:\ttest: 0.6847683\tbest: 0.6847756 (1099)\ttotal: 43.5s\tremaining: 2m 34s\n",
      "1200:\ttest: 0.6856614\tbest: 0.6856753 (1199)\ttotal: 47.4s\tremaining: 2m 30s\n",
      "1300:\ttest: 0.6863572\tbest: 0.6863572 (1300)\ttotal: 51.5s\tremaining: 2m 26s\n",
      "1400:\ttest: 0.6867958\tbest: 0.6867958 (1400)\ttotal: 55.8s\tremaining: 2m 23s\n",
      "1500:\ttest: 0.6875044\tbest: 0.6875086 (1497)\ttotal: 59.8s\tremaining: 2m 19s\n",
      "1600:\ttest: 0.6878609\tbest: 0.6878609 (1600)\ttotal: 1m 3s\tremaining: 2m 14s\n",
      "1700:\ttest: 0.6883760\tbest: 0.6883760 (1700)\ttotal: 1m 7s\tremaining: 2m 10s\n",
      "1800:\ttest: 0.6887513\tbest: 0.6887585 (1799)\ttotal: 1m 10s\tremaining: 2m 6s\n",
      "1900:\ttest: 0.6891773\tbest: 0.6891780 (1899)\ttotal: 1m 14s\tremaining: 2m 1s\n",
      "2000:\ttest: 0.6895341\tbest: 0.6895341 (2000)\ttotal: 1m 18s\tremaining: 1m 57s\n",
      "2100:\ttest: 0.6897131\tbest: 0.6897515 (2085)\ttotal: 1m 22s\tremaining: 1m 53s\n",
      "2200:\ttest: 0.6899673\tbest: 0.6899755 (2197)\ttotal: 1m 26s\tremaining: 1m 49s\n",
      "2300:\ttest: 0.6902562\tbest: 0.6902633 (2297)\ttotal: 1m 30s\tremaining: 1m 45s\n",
      "2400:\ttest: 0.6903653\tbest: 0.6903916 (2398)\ttotal: 1m 34s\tremaining: 1m 41s\n",
      "2500:\ttest: 0.6905957\tbest: 0.6905957 (2500)\ttotal: 1m 37s\tremaining: 1m 37s\n",
      "2600:\ttest: 0.6906263\tbest: 0.6906266 (2599)\ttotal: 1m 42s\tremaining: 1m 34s\n",
      "2700:\ttest: 0.6907717\tbest: 0.6907797 (2687)\ttotal: 1m 46s\tremaining: 1m 30s\n",
      "2800:\ttest: 0.6909571\tbest: 0.6909585 (2798)\ttotal: 1m 50s\tremaining: 1m 26s\n",
      "2900:\ttest: 0.6910811\tbest: 0.6910811 (2900)\ttotal: 1m 54s\tremaining: 1m 22s\n",
      "3000:\ttest: 0.6912477\tbest: 0.6912626 (2972)\ttotal: 1m 58s\tremaining: 1m 18s\n",
      "3100:\ttest: 0.6912573\tbest: 0.6912882 (3016)\ttotal: 2m 2s\tremaining: 1m 14s\n",
      "3200:\ttest: 0.6914147\tbest: 0.6914445 (3195)\ttotal: 2m 6s\tremaining: 1m 11s\n",
      "3300:\ttest: 0.6915373\tbest: 0.6915519 (3296)\ttotal: 2m 10s\tremaining: 1m 7s\n",
      "3400:\ttest: 0.6915911\tbest: 0.6916013 (3365)\ttotal: 2m 14s\tremaining: 1m 3s\n",
      "3500:\ttest: 0.6917340\tbest: 0.6917737 (3467)\ttotal: 2m 18s\tremaining: 59.1s\n",
      "3600:\ttest: 0.6918753\tbest: 0.6918753 (3600)\ttotal: 2m 21s\tremaining: 55.1s\n",
      "3700:\ttest: 0.6918973\tbest: 0.6919437 (3686)\ttotal: 2m 25s\tremaining: 51.2s\n",
      "3800:\ttest: 0.6920410\tbest: 0.6920561 (3775)\ttotal: 2m 29s\tremaining: 47.3s\n",
      "3900:\ttest: 0.6922775\tbest: 0.6922775 (3900)\ttotal: 2m 33s\tremaining: 43.4s\n",
      "4000:\ttest: 0.6923379\tbest: 0.6923380 (3995)\ttotal: 2m 37s\tremaining: 39.4s\n",
      "4100:\ttest: 0.6923630\tbest: 0.6923892 (4053)\ttotal: 2m 41s\tremaining: 35.4s\n",
      "4200:\ttest: 0.6923682\tbest: 0.6923974 (4187)\ttotal: 2m 45s\tremaining: 31.4s\n",
      "4300:\ttest: 0.6923517\tbest: 0.6924084 (4231)\ttotal: 2m 48s\tremaining: 27.5s\n",
      "4400:\ttest: 0.6924359\tbest: 0.6924688 (4368)\ttotal: 2m 52s\tremaining: 23.5s\n",
      "4500:\ttest: 0.6925241\tbest: 0.6925380 (4488)\ttotal: 2m 56s\tremaining: 19.6s\n",
      "4600:\ttest: 0.6927026\tbest: 0.6927274 (4595)\ttotal: 3m\tremaining: 15.6s\n",
      "4700:\ttest: 0.6926779\tbest: 0.6927438 (4643)\ttotal: 3m 4s\tremaining: 11.7s\n",
      "4800:\ttest: 0.6925279\tbest: 0.6927438 (4643)\ttotal: 3m 7s\tremaining: 7.79s\n",
      "4900:\ttest: 0.6925335\tbest: 0.6927438 (4643)\ttotal: 3m 11s\tremaining: 3.87s\n",
      "Stopped by overfitting detector  (300 iterations wait)\n",
      "\n",
      "bestTest = 0.6927438392\n",
      "bestIteration = 4643\n",
      "\n",
      "Shrink model to first 4644 iterations.\n",
      "0.6927438391555076\n",
      "\n",
      "============================CAT training use Data 2/5============================\n",
      "\n",
      "0:\ttest: 0.5651202\tbest: 0.5651202 (0)\ttotal: 42.3ms\tremaining: 3m 31s\n",
      "100:\ttest: 0.6518616\tbest: 0.6519874 (99)\ttotal: 3.9s\tremaining: 3m 9s\n",
      "200:\ttest: 0.6600045\tbest: 0.6600045 (200)\ttotal: 7.74s\tremaining: 3m 4s\n",
      "300:\ttest: 0.6662277\tbest: 0.6662277 (300)\ttotal: 11.6s\tremaining: 3m\n",
      "400:\ttest: 0.6716950\tbest: 0.6716950 (400)\ttotal: 15.5s\tremaining: 2m 57s\n",
      "500:\ttest: 0.6764946\tbest: 0.6764946 (500)\ttotal: 19.3s\tremaining: 2m 53s\n",
      "600:\ttest: 0.6792501\tbest: 0.6792501 (600)\ttotal: 23.1s\tremaining: 2m 49s\n",
      "700:\ttest: 0.6818945\tbest: 0.6818945 (700)\ttotal: 27s\tremaining: 2m 45s\n",
      "800:\ttest: 0.6837120\tbest: 0.6837120 (800)\ttotal: 30.8s\tremaining: 2m 41s\n",
      "900:\ttest: 0.6851878\tbest: 0.6851878 (900)\ttotal: 34.6s\tremaining: 2m 37s\n",
      "1000:\ttest: 0.6865768\tbest: 0.6865768 (1000)\ttotal: 38.4s\tremaining: 2m 33s\n",
      "1100:\ttest: 0.6877209\tbest: 0.6877223 (1099)\ttotal: 42.3s\tremaining: 2m 29s\n",
      "1200:\ttest: 0.6886975\tbest: 0.6886975 (1200)\ttotal: 46.2s\tremaining: 2m 26s\n",
      "1300:\ttest: 0.6893346\tbest: 0.6893413 (1299)\ttotal: 50.1s\tremaining: 2m 22s\n",
      "1400:\ttest: 0.6897032\tbest: 0.6897086 (1397)\ttotal: 54s\tremaining: 2m 18s\n",
      "1500:\ttest: 0.6901768\tbest: 0.6901768 (1500)\ttotal: 58s\tremaining: 2m 15s\n",
      "1600:\ttest: 0.6907389\tbest: 0.6907389 (1600)\ttotal: 1m 1s\tremaining: 2m 11s\n",
      "1700:\ttest: 0.6912156\tbest: 0.6912156 (1700)\ttotal: 1m 5s\tremaining: 2m 7s\n",
      "1800:\ttest: 0.6916992\tbest: 0.6917059 (1797)\ttotal: 1m 9s\tremaining: 2m 3s\n",
      "1900:\ttest: 0.6920774\tbest: 0.6920780 (1899)\ttotal: 1m 13s\tremaining: 1m 59s\n",
      "2000:\ttest: 0.6924122\tbest: 0.6924122 (2000)\ttotal: 1m 17s\tremaining: 1m 55s\n",
      "2100:\ttest: 0.6927128\tbest: 0.6927128 (2100)\ttotal: 1m 21s\tremaining: 1m 51s\n",
      "2200:\ttest: 0.6928481\tbest: 0.6928481 (2200)\ttotal: 1m 24s\tremaining: 1m 47s\n",
      "2300:\ttest: 0.6930400\tbest: 0.6930676 (2295)\ttotal: 1m 28s\tremaining: 1m 43s\n",
      "2400:\ttest: 0.6932328\tbest: 0.6932328 (2400)\ttotal: 1m 32s\tremaining: 1m 40s\n",
      "2500:\ttest: 0.6934945\tbest: 0.6934945 (2500)\ttotal: 1m 36s\tremaining: 1m 36s\n",
      "2600:\ttest: 0.6935420\tbest: 0.6935420 (2600)\ttotal: 1m 40s\tremaining: 1m 32s\n",
      "2700:\ttest: 0.6936496\tbest: 0.6936656 (2675)\ttotal: 1m 43s\tremaining: 1m 28s\n",
      "2800:\ttest: 0.6935649\tbest: 0.6936656 (2675)\ttotal: 1m 47s\tremaining: 1m 24s\n",
      "2900:\ttest: 0.6938244\tbest: 0.6938244 (2900)\ttotal: 1m 51s\tremaining: 1m 20s\n",
      "3000:\ttest: 0.6939317\tbest: 0.6939317 (3000)\ttotal: 1m 55s\tremaining: 1m 16s\n",
      "3100:\ttest: 0.6939677\tbest: 0.6939930 (3080)\ttotal: 1m 59s\tremaining: 1m 12s\n",
      "3200:\ttest: 0.6940211\tbest: 0.6940540 (3123)\ttotal: 2m 3s\tremaining: 1m 9s\n",
      "3300:\ttest: 0.6941304\tbest: 0.6941564 (3294)\ttotal: 2m 7s\tremaining: 1m 5s\n",
      "3400:\ttest: 0.6942869\tbest: 0.6943051 (3375)\ttotal: 2m 10s\tremaining: 1m 1s\n",
      "3500:\ttest: 0.6944249\tbest: 0.6944263 (3499)\ttotal: 2m 14s\tremaining: 57.6s\n",
      "3600:\ttest: 0.6945342\tbest: 0.6945452 (3595)\ttotal: 2m 18s\tremaining: 53.7s\n",
      "3700:\ttest: 0.6946243\tbest: 0.6946243 (3700)\ttotal: 2m 22s\tremaining: 49.8s\n",
      "3800:\ttest: 0.6945540\tbest: 0.6946258 (3701)\ttotal: 2m 25s\tremaining: 46s\n",
      "3900:\ttest: 0.6945393\tbest: 0.6946258 (3701)\ttotal: 2m 29s\tremaining: 42.1s\n",
      "4000:\ttest: 0.6945350\tbest: 0.6946258 (3701)\ttotal: 2m 33s\tremaining: 38.2s\n",
      "Stopped by overfitting detector  (300 iterations wait)\n",
      "\n",
      "bestTest = 0.6946257857\n",
      "bestIteration = 3701\n",
      "\n",
      "Shrink model to first 3702 iterations.\n",
      "0.6946257856589872\n",
      "\n",
      "============================CAT training use Data 3/5============================\n",
      "\n",
      "0:\ttest: 0.5741912\tbest: 0.5741912 (0)\ttotal: 40.9ms\tremaining: 3m 24s\n",
      "100:\ttest: 0.6497432\tbest: 0.6497432 (100)\ttotal: 3.89s\tremaining: 3m 8s\n",
      "200:\ttest: 0.6569533\tbest: 0.6569533 (200)\ttotal: 7.7s\tremaining: 3m 3s\n",
      "300:\ttest: 0.6632018\tbest: 0.6632018 (300)\ttotal: 11.5s\tremaining: 2m 59s\n",
      "400:\ttest: 0.6683776\tbest: 0.6683776 (400)\ttotal: 15.4s\tremaining: 2m 56s\n",
      "500:\ttest: 0.6712394\tbest: 0.6712396 (499)\ttotal: 19.2s\tremaining: 2m 51s\n",
      "600:\ttest: 0.6735571\tbest: 0.6735571 (600)\ttotal: 23s\tremaining: 2m 48s\n",
      "700:\ttest: 0.6756623\tbest: 0.6756740 (699)\ttotal: 26.8s\tremaining: 2m 44s\n",
      "800:\ttest: 0.6772673\tbest: 0.6772673 (800)\ttotal: 30.5s\tremaining: 2m 40s\n",
      "900:\ttest: 0.6784933\tbest: 0.6784933 (900)\ttotal: 34.3s\tremaining: 2m 36s\n",
      "1000:\ttest: 0.6793697\tbest: 0.6793735 (999)\ttotal: 38.2s\tremaining: 2m 32s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1100:\ttest: 0.6803461\tbest: 0.6803461 (1100)\ttotal: 42s\tremaining: 2m 28s\n",
      "1200:\ttest: 0.6811224\tbest: 0.6811445 (1196)\ttotal: 45.8s\tremaining: 2m 24s\n",
      "1300:\ttest: 0.6814279\tbest: 0.6814338 (1299)\ttotal: 49.7s\tremaining: 2m 21s\n",
      "1400:\ttest: 0.6817680\tbest: 0.6817772 (1397)\ttotal: 53.9s\tremaining: 2m 18s\n",
      "1500:\ttest: 0.6820149\tbest: 0.6820149 (1500)\ttotal: 57.9s\tremaining: 2m 15s\n",
      "1600:\ttest: 0.6822641\tbest: 0.6822820 (1577)\ttotal: 1m 1s\tremaining: 2m 11s\n",
      "1700:\ttest: 0.6824839\tbest: 0.6824839 (1700)\ttotal: 1m 5s\tremaining: 2m 7s\n",
      "1800:\ttest: 0.6827303\tbest: 0.6827303 (1800)\ttotal: 1m 9s\tremaining: 2m 3s\n",
      "1900:\ttest: 0.6829928\tbest: 0.6830211 (1889)\ttotal: 1m 13s\tremaining: 1m 59s\n",
      "2000:\ttest: 0.6832122\tbest: 0.6832148 (1999)\ttotal: 1m 17s\tremaining: 1m 55s\n",
      "2100:\ttest: 0.6834069\tbest: 0.6834093 (2099)\ttotal: 1m 21s\tremaining: 1m 51s\n",
      "2200:\ttest: 0.6836113\tbest: 0.6836113 (2200)\ttotal: 1m 24s\tremaining: 1m 47s\n",
      "2300:\ttest: 0.6837453\tbest: 0.6837453 (2300)\ttotal: 1m 28s\tremaining: 1m 43s\n",
      "2400:\ttest: 0.6838529\tbest: 0.6838614 (2365)\ttotal: 1m 32s\tremaining: 1m 39s\n",
      "2500:\ttest: 0.6840208\tbest: 0.6840288 (2497)\ttotal: 1m 35s\tremaining: 1m 35s\n",
      "2600:\ttest: 0.6841210\tbest: 0.6841561 (2555)\ttotal: 1m 39s\tremaining: 1m 31s\n",
      "2700:\ttest: 0.6841672\tbest: 0.6841672 (2700)\ttotal: 1m 43s\tremaining: 1m 27s\n",
      "2800:\ttest: 0.6842275\tbest: 0.6842279 (2799)\ttotal: 1m 47s\tremaining: 1m 24s\n",
      "2900:\ttest: 0.6844423\tbest: 0.6844481 (2899)\ttotal: 1m 50s\tremaining: 1m 20s\n",
      "3000:\ttest: 0.6845302\tbest: 0.6845512 (2964)\ttotal: 1m 54s\tremaining: 1m 16s\n",
      "3100:\ttest: 0.6846368\tbest: 0.6846447 (3093)\ttotal: 1m 58s\tremaining: 1m 12s\n",
      "3200:\ttest: 0.6847301\tbest: 0.6847404 (3198)\ttotal: 2m 2s\tremaining: 1m 8s\n",
      "3300:\ttest: 0.6847665\tbest: 0.6847665 (3300)\ttotal: 2m 5s\tremaining: 1m 4s\n",
      "3400:\ttest: 0.6847435\tbest: 0.6847927 (3359)\ttotal: 2m 9s\tremaining: 1m\n",
      "3500:\ttest: 0.6847194\tbest: 0.6848488 (3438)\ttotal: 2m 13s\tremaining: 57.1s\n",
      "3600:\ttest: 0.6846391\tbest: 0.6848488 (3438)\ttotal: 2m 17s\tremaining: 53.2s\n",
      "3700:\ttest: 0.6847263\tbest: 0.6848488 (3438)\ttotal: 2m 20s\tremaining: 49.4s\n",
      "Stopped by overfitting detector  (300 iterations wait)\n",
      "\n",
      "bestTest = 0.6848488245\n",
      "bestIteration = 3438\n",
      "\n",
      "Shrink model to first 3439 iterations.\n",
      "0.684848824479438\n",
      "\n",
      "============================CAT training use Data 4/5============================\n",
      "\n",
      "0:\ttest: 0.5728528\tbest: 0.5728528 (0)\ttotal: 40.8ms\tremaining: 3m 24s\n",
      "100:\ttest: 0.6458969\tbest: 0.6459245 (99)\ttotal: 3.89s\tremaining: 3m 8s\n",
      "200:\ttest: 0.6572001\tbest: 0.6572001 (200)\ttotal: 7.71s\tremaining: 3m 4s\n",
      "300:\ttest: 0.6636021\tbest: 0.6636021 (300)\ttotal: 11.6s\tremaining: 3m\n",
      "400:\ttest: 0.6693121\tbest: 0.6693121 (400)\ttotal: 15.4s\tremaining: 2m 56s\n",
      "500:\ttest: 0.6732268\tbest: 0.6732328 (499)\ttotal: 19.3s\tremaining: 2m 53s\n",
      "600:\ttest: 0.6760034\tbest: 0.6760099 (599)\ttotal: 23.1s\tremaining: 2m 49s\n",
      "700:\ttest: 0.6780635\tbest: 0.6780635 (700)\ttotal: 26.9s\tremaining: 2m 45s\n",
      "800:\ttest: 0.6801440\tbest: 0.6801440 (800)\ttotal: 31.3s\tremaining: 2m 44s\n",
      "900:\ttest: 0.6818615\tbest: 0.6818615 (900)\ttotal: 35.5s\tremaining: 2m 41s\n",
      "1000:\ttest: 0.6830716\tbest: 0.6830716 (1000)\ttotal: 39.4s\tremaining: 2m 37s\n",
      "1100:\ttest: 0.6839779\tbest: 0.6839864 (1098)\ttotal: 43.3s\tremaining: 2m 33s\n",
      "1200:\ttest: 0.6846388\tbest: 0.6846390 (1198)\ttotal: 47.1s\tremaining: 2m 28s\n",
      "1300:\ttest: 0.6849530\tbest: 0.6849546 (1299)\ttotal: 50.8s\tremaining: 2m 24s\n",
      "1400:\ttest: 0.6853979\tbest: 0.6853979 (1400)\ttotal: 54.6s\tremaining: 2m 20s\n",
      "1500:\ttest: 0.6856017\tbest: 0.6856017 (1500)\ttotal: 58.3s\tremaining: 2m 16s\n",
      "1600:\ttest: 0.6858208\tbest: 0.6858216 (1597)\ttotal: 1m 2s\tremaining: 2m 11s\n",
      "1700:\ttest: 0.6864175\tbest: 0.6864245 (1699)\ttotal: 1m 5s\tremaining: 2m 7s\n",
      "1800:\ttest: 0.6868308\tbest: 0.6868596 (1792)\ttotal: 1m 9s\tremaining: 2m 3s\n",
      "1900:\ttest: 0.6870011\tbest: 0.6870011 (1900)\ttotal: 1m 13s\tremaining: 1m 59s\n",
      "2000:\ttest: 0.6872646\tbest: 0.6872704 (1999)\ttotal: 1m 17s\tremaining: 1m 55s\n",
      "2100:\ttest: 0.6873943\tbest: 0.6874347 (2087)\ttotal: 1m 21s\tremaining: 1m 51s\n",
      "2200:\ttest: 0.6877000\tbest: 0.6877000 (2200)\ttotal: 1m 24s\tremaining: 1m 48s\n",
      "2300:\ttest: 0.6879873\tbest: 0.6879873 (2300)\ttotal: 1m 28s\tremaining: 1m 44s\n",
      "2400:\ttest: 0.6881848\tbest: 0.6881848 (2400)\ttotal: 1m 32s\tremaining: 1m 40s\n",
      "2500:\ttest: 0.6883933\tbest: 0.6883933 (2500)\ttotal: 1m 36s\tremaining: 1m 36s\n",
      "2600:\ttest: 0.6886691\tbest: 0.6886905 (2587)\ttotal: 1m 40s\tremaining: 1m 32s\n",
      "2700:\ttest: 0.6888707\tbest: 0.6888757 (2699)\ttotal: 1m 43s\tremaining: 1m 28s\n",
      "2800:\ttest: 0.6889604\tbest: 0.6889837 (2780)\ttotal: 1m 47s\tremaining: 1m 24s\n",
      "2900:\ttest: 0.6891383\tbest: 0.6891540 (2882)\ttotal: 1m 51s\tremaining: 1m 20s\n",
      "3000:\ttest: 0.6892500\tbest: 0.6892668 (2976)\ttotal: 1m 55s\tremaining: 1m 16s\n",
      "3100:\ttest: 0.6893643\tbest: 0.6893676 (3093)\ttotal: 1m 58s\tremaining: 1m 12s\n",
      "3200:\ttest: 0.6894640\tbest: 0.6894749 (3199)\ttotal: 2m 2s\tremaining: 1m 9s\n",
      "3300:\ttest: 0.6895780\tbest: 0.6895918 (3293)\ttotal: 2m 6s\tremaining: 1m 5s\n",
      "3400:\ttest: 0.6896017\tbest: 0.6896062 (3398)\ttotal: 2m 10s\tremaining: 1m 1s\n",
      "3500:\ttest: 0.6896864\tbest: 0.6897134 (3466)\ttotal: 2m 14s\tremaining: 57.5s\n",
      "3600:\ttest: 0.6897361\tbest: 0.6897361 (3600)\ttotal: 2m 18s\tremaining: 53.6s\n",
      "3700:\ttest: 0.6897369\tbest: 0.6897750 (3609)\ttotal: 2m 21s\tremaining: 49.8s\n",
      "3800:\ttest: 0.6897942\tbest: 0.6898102 (3798)\ttotal: 2m 25s\tremaining: 46s\n",
      "3900:\ttest: 0.6898541\tbest: 0.6898824 (3888)\ttotal: 2m 29s\tremaining: 42.1s\n",
      "4000:\ttest: 0.6900260\tbest: 0.6900482 (3991)\ttotal: 2m 33s\tremaining: 38.3s\n",
      "4100:\ttest: 0.6901342\tbest: 0.6901475 (4068)\ttotal: 2m 37s\tremaining: 34.4s\n",
      "4200:\ttest: 0.6901274\tbest: 0.6901800 (4119)\ttotal: 2m 40s\tremaining: 30.6s\n",
      "4300:\ttest: 0.6901478\tbest: 0.6901800 (4119)\ttotal: 2m 44s\tremaining: 26.8s\n",
      "4400:\ttest: 0.6901093\tbest: 0.6901827 (4308)\ttotal: 2m 48s\tremaining: 22.9s\n",
      "4500:\ttest: 0.6900934\tbest: 0.6901827 (4308)\ttotal: 2m 52s\tremaining: 19.1s\n",
      "4600:\ttest: 0.6901856\tbest: 0.6902330 (4572)\ttotal: 2m 56s\tremaining: 15.3s\n",
      "4700:\ttest: 0.6901803\tbest: 0.6902330 (4572)\ttotal: 2m 59s\tremaining: 11.4s\n",
      "4800:\ttest: 0.6901802\tbest: 0.6902417 (4781)\ttotal: 3m 3s\tremaining: 7.61s\n",
      "4900:\ttest: 0.6901682\tbest: 0.6902417 (4781)\ttotal: 3m 7s\tremaining: 3.78s\n",
      "4999:\ttest: 0.6901601\tbest: 0.6902417 (4781)\ttotal: 3m 11s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.6902416817\n",
      "bestIteration = 4781\n",
      "\n",
      "Shrink model to first 4782 iterations.\n",
      "0.6902416816538276\n",
      "\n",
      "============================CAT training use Data 5/5============================\n",
      "\n",
      "0:\ttest: 0.5768546\tbest: 0.5768546 (0)\ttotal: 42.2ms\tremaining: 3m 30s\n",
      "100:\ttest: 0.6530812\tbest: 0.6530812 (100)\ttotal: 3.99s\tremaining: 3m 13s\n",
      "200:\ttest: 0.6589886\tbest: 0.6590214 (199)\ttotal: 7.89s\tremaining: 3m 8s\n",
      "300:\ttest: 0.6646456\tbest: 0.6646456 (300)\ttotal: 11.7s\tremaining: 3m 3s\n",
      "400:\ttest: 0.6690966\tbest: 0.6690966 (400)\ttotal: 15.5s\tremaining: 2m 58s\n",
      "500:\ttest: 0.6731337\tbest: 0.6731337 (500)\ttotal: 19.3s\tremaining: 2m 53s\n",
      "600:\ttest: 0.6759735\tbest: 0.6759735 (600)\ttotal: 23.5s\tremaining: 2m 51s\n",
      "700:\ttest: 0.6781503\tbest: 0.6781503 (700)\ttotal: 27.3s\tremaining: 2m 47s\n",
      "800:\ttest: 0.6796473\tbest: 0.6796473 (800)\ttotal: 31.1s\tremaining: 2m 42s\n",
      "900:\ttest: 0.6811835\tbest: 0.6811835 (900)\ttotal: 34.9s\tremaining: 2m 38s\n",
      "1000:\ttest: 0.6822988\tbest: 0.6822988 (1000)\ttotal: 38.7s\tremaining: 2m 34s\n",
      "1100:\ttest: 0.6831541\tbest: 0.6831541 (1100)\ttotal: 42.4s\tremaining: 2m 30s\n",
      "1200:\ttest: 0.6839334\tbest: 0.6839334 (1200)\ttotal: 46.2s\tremaining: 2m 26s\n",
      "1300:\ttest: 0.6846077\tbest: 0.6846077 (1300)\ttotal: 49.9s\tremaining: 2m 22s\n",
      "1400:\ttest: 0.6850831\tbest: 0.6850835 (1399)\ttotal: 53.6s\tremaining: 2m 17s\n",
      "1500:\ttest: 0.6854743\tbest: 0.6854743 (1500)\ttotal: 57.3s\tremaining: 2m 13s\n",
      "1600:\ttest: 0.6858873\tbest: 0.6858877 (1599)\ttotal: 1m\tremaining: 2m 9s\n",
      "1700:\ttest: 0.6863815\tbest: 0.6863815 (1700)\ttotal: 1m 4s\tremaining: 2m 5s\n",
      "1800:\ttest: 0.6867259\tbest: 0.6867488 (1796)\ttotal: 1m 8s\tremaining: 2m 1s\n",
      "1900:\ttest: 0.6871281\tbest: 0.6871281 (1900)\ttotal: 1m 12s\tremaining: 1m 57s\n",
      "2000:\ttest: 0.6875174\tbest: 0.6875178 (1998)\ttotal: 1m 15s\tremaining: 1m 53s\n",
      "2100:\ttest: 0.6877603\tbest: 0.6877673 (2082)\ttotal: 1m 19s\tremaining: 1m 49s\n",
      "2200:\ttest: 0.6881292\tbest: 0.6881316 (2198)\ttotal: 1m 23s\tremaining: 1m 45s\n",
      "2300:\ttest: 0.6884991\tbest: 0.6884991 (2300)\ttotal: 1m 27s\tremaining: 1m 42s\n",
      "2400:\ttest: 0.6888365\tbest: 0.6888365 (2400)\ttotal: 1m 31s\tremaining: 1m 38s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2500:\ttest: 0.6890476\tbest: 0.6890660 (2486)\ttotal: 1m 34s\tremaining: 1m 34s\n",
      "2600:\ttest: 0.6892505\tbest: 0.6892721 (2584)\ttotal: 1m 38s\tremaining: 1m 30s\n",
      "2700:\ttest: 0.6894712\tbest: 0.6894712 (2700)\ttotal: 1m 42s\tremaining: 1m 27s\n",
      "2800:\ttest: 0.6896795\tbest: 0.6897008 (2796)\ttotal: 1m 46s\tremaining: 1m 23s\n",
      "2900:\ttest: 0.6898034\tbest: 0.6898069 (2895)\ttotal: 1m 49s\tremaining: 1m 19s\n",
      "3000:\ttest: 0.6900550\tbest: 0.6900550 (3000)\ttotal: 1m 53s\tremaining: 1m 15s\n",
      "3100:\ttest: 0.6900579\tbest: 0.6900854 (3043)\ttotal: 1m 57s\tremaining: 1m 11s\n",
      "3200:\ttest: 0.6901429\tbest: 0.6901470 (3196)\ttotal: 2m 1s\tremaining: 1m 8s\n",
      "3300:\ttest: 0.6902805\tbest: 0.6902892 (3294)\ttotal: 2m 4s\tremaining: 1m 4s\n",
      "3400:\ttest: 0.6905239\tbest: 0.6905239 (3400)\ttotal: 2m 8s\tremaining: 1m\n",
      "3500:\ttest: 0.6906787\tbest: 0.6906893 (3488)\ttotal: 2m 12s\tremaining: 56.7s\n",
      "3600:\ttest: 0.6908599\tbest: 0.6908599 (3600)\ttotal: 2m 16s\tremaining: 52.9s\n",
      "3700:\ttest: 0.6910290\tbest: 0.6910393 (3697)\ttotal: 2m 20s\tremaining: 49.1s\n",
      "3800:\ttest: 0.6910032\tbest: 0.6910549 (3706)\ttotal: 2m 23s\tremaining: 45.3s\n",
      "3900:\ttest: 0.6910945\tbest: 0.6911089 (3876)\ttotal: 2m 27s\tremaining: 41.6s\n",
      "4000:\ttest: 0.6911444\tbest: 0.6911629 (3992)\ttotal: 2m 31s\tremaining: 37.8s\n",
      "4100:\ttest: 0.6912597\tbest: 0.6912694 (4082)\ttotal: 2m 35s\tremaining: 34s\n",
      "4200:\ttest: 0.6913750\tbest: 0.6913814 (4192)\ttotal: 2m 39s\tremaining: 30.3s\n",
      "4300:\ttest: 0.6914896\tbest: 0.6915030 (4284)\ttotal: 2m 42s\tremaining: 26.5s\n",
      "4400:\ttest: 0.6914936\tbest: 0.6915030 (4284)\ttotal: 2m 46s\tremaining: 22.7s\n",
      "4500:\ttest: 0.6915424\tbest: 0.6915987 (4450)\ttotal: 2m 50s\tremaining: 18.9s\n",
      "4600:\ttest: 0.6915799\tbest: 0.6915987 (4450)\ttotal: 2m 54s\tremaining: 15.1s\n",
      "4700:\ttest: 0.6916722\tbest: 0.6916998 (4691)\ttotal: 2m 58s\tremaining: 11.3s\n",
      "4800:\ttest: 0.6915954\tbest: 0.6916998 (4691)\ttotal: 3m 1s\tremaining: 7.54s\n",
      "4900:\ttest: 0.6916365\tbest: 0.6916998 (4691)\ttotal: 3m 5s\tremaining: 3.75s\n",
      "Stopped by overfitting detector  (300 iterations wait)\n",
      "\n",
      "bestTest = 0.6916998299\n",
      "bestIteration = 4691\n",
      "\n",
      "Shrink model to first 4692 iterations.\n",
      "0.6916998298524095\n"
     ]
    }
   ],
   "source": [
    "# Divide train set into 5 catboost models\n",
    "# catgbm\n",
    "pred_cats = []\n",
    "for i in range(5):\n",
    "    print(\n",
    "        '\\n============================CAT training use Data {}/5============================\\n'\n",
    "        .format(i + 1))\n",
    "    model_cat = cat.CatBoostClassifier(\n",
    "        learning_rate=0.01,\n",
    "        iterations=5000,\n",
    "        eval_metric='AUC',\n",
    "        depth=7,\n",
    "        od_wait=300,\n",
    "        od_type='Iter',\n",
    "        #                                 early_stopping_rounds=500,\n",
    "        random_state=10,\n",
    "        thread_count=8,\n",
    "        l2_leaf_reg=12,\n",
    "        verbose=100)\n",
    "    model_cat.fit(X_train[i],\n",
    "                  y_train[i],\n",
    "                  eval_set=[(X_valid[i], y_valid[i])],\n",
    "                  early_stopping_rounds=300,\n",
    "                  use_best_model=True)\n",
    "    print(model_cat.best_score_['validation']['AUC'])\n",
    "\n",
    "    pred = model_cat.predict_proba(test_data)\n",
    "    pred = pd.DataFrame(pred[:, 1])\n",
    "    pred_cats.append(pred)\n",
    "pred_cats = pd.concat(pred_cats, axis=1)\n",
    "\n",
    "submission['prob'] = pred_cats.mean(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "379bc44f",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T02:56:42.831187Z",
     "start_time": "2021-12-27T02:56:42.232265Z"
    }
   },
   "outputs": [],
   "source": [
    "# submission.drop(['origin'], axis=1, inplace=True)\n",
    "submission.to_csv('submission_KFold_cat.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34101bf3",
   "metadata": {
    "colab_type": "text",
    "id": "49QqMtKjWtBX"
   },
   "source": [
    "### XGboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "671248a5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T02:57:02.735942Z",
     "start_time": "2021-12-27T02:56:52.973860Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "u7Gv2OW2ZPTG"
   },
   "outputs": [],
   "source": [
    "# Read data\n",
    "if not LOCAL_QUICK:\n",
    "    if FE_V1:\n",
    "        train_data = pd.read_csv('train_data.csv')\n",
    "        test_data = pd.read_csv('test_data.csv')\n",
    "    if MORE_FE:\n",
    "        train_data = pd.read_csv('train_data_moreFE.csv')\n",
    "        test_data = pd.read_csv('test_data_moreFE.csv')\n",
    "\n",
    "train_X, train_y = train_data.drop(['label'], axis=1), train_data['label']\n",
    "\n",
    "# Split Train&Valid Data\n",
    "X_train, X_valid, y_train, y_valid = get_train_testDF(train_X, train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "00e16a2e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-27T03:20:29.806081Z",
     "start_time": "2021-12-27T03:10:53.005410Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 353
    },
    "colab_type": "code",
    "id": "bnCAP5aRt4y_",
    "outputId": "44d45321-4d6f-423b-8dbc-de3cf3f6370b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================XGB training use Data 1/5============================\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/yduanmu/opt/anaconda3/lib/python3.8/site-packages/xgboost/sklearn.py:888: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].\n",
      "  warnings.warn(label_encoder_deprecation_msg, UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.689537\n",
      "\n",
      "============================XGB training use Data 2/5============================\n",
      "\n",
      "0.68872\n",
      "\n",
      "============================XGB training use Data 3/5============================\n",
      "\n",
      "0.682097\n",
      "\n",
      "============================XGB training use Data 4/5============================\n",
      "\n",
      "0.686997\n",
      "\n",
      "============================XGB training use Data 5/5============================\n",
      "\n",
      "0.687532\n"
     ]
    }
   ],
   "source": [
    "# Divided train set into 5 XGBoost models\n",
    "# XGBoost model\n",
    "pred_xgbs = []\n",
    "for i in range(5):\n",
    "    print(\n",
    "        '\\n============================XGB training use Data {}/5============================\\n'\n",
    "        .format(i + 1))\n",
    "    model_xgb = xgb.XGBClassifier(\n",
    "        max_depth=8,  # raw8\n",
    "        n_estimators=3000,\n",
    "        min_child_weight=100,\n",
    "        colsample_bytree=0.8,\n",
    "        subsample=0.8,\n",
    "        eta=0.2,\n",
    "        seed=42,\n",
    "        nthread=8)\n",
    "\n",
    "    model_xgb.fit(\n",
    "        X_train[i],\n",
    "        y_train[i],\n",
    "        eval_metric='auc',\n",
    "        eval_set=[(X_train[i], y_train[i]), (X_valid[i], y_valid[i])],\n",
    "        verbose=False,\n",
    "        early_stopping_rounds=100  # 早停法，如果auc在10epoch没有进步就stop\n",
    "    )\n",
    "\n",
    "    print(model_xgb.best_score)\n",
    "\n",
    "    pred = model_xgb.predict_proba(test_data)\n",
    "    pred = pd.DataFrame(pred[:, 1])\n",
    "    pred_xgbs.append(pred)\n",
    "pred_xgbs = pd.concat(pred_xgbs, axis=1)\n",
    "\n",
    "# make submission\n",
    "submission['prob'] = pred_xgbs.mean(axis=1)\n",
    "# submission.drop(['origin'], axis=1, inplace=True)\n",
    "submission.to_csv('submission_KFold_xgb.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2db5ae0",
   "metadata": {
    "colab_type": "text",
    "id": "PU2TQEoRduwt"
   },
   "source": [
    "## Blending"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "734ba3e8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-28T08:35:11.475069Z",
     "start_time": "2021-12-28T08:35:11.059502Z"
    },
    "colab": {},
    "colab_type": "code",
    "id": "mt8eYmt-b_7-"
   },
   "outputs": [],
   "source": [
    "xgb_1 = pd.read_csv('submission_xgb.csv')\n",
    "lgb_KFold = pd.read_csv(\"submission_KFold_lgb.csv\")\n",
    "xgb_KFold = pd.read_csv(\"submission_KFold_xgb.csv\")\n",
    "cat_KFold = pd.read_csv(\"submission_KFold_cat.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "66981b9e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-28T08:35:26.170302Z",
     "start_time": "2021-12-28T08:35:26.140488Z"
    },
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 67
    },
    "colab_type": "code",
    "executionInfo": {
     "elapsed": 1414,
     "status": "ok",
     "timestamp": 1588476270709,
     "user": {
      "displayName": "Wang Leo",
      "photoUrl": "",
      "userId": "15935752008260826958"
     },
     "user_tz": -480
    },
    "id": "yD8zZRxXcTNb",
    "outputId": "f9cd2047-688c-4c77-8ec4-c7203b4e1a04"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.89183943, 0.87952985, 0.8750504 ],\n",
       "       [0.89183943, 1.        , 0.98269074, 0.96366744],\n",
       "       [0.87952985, 0.98269074, 1.        , 0.96568474],\n",
       "       [0.8750504 , 0.96366744, 0.96568474, 1.        ]])"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# correlation coefficients\n",
    "df = np.array([xgb_1.prob, lgb_KFold.prob, xgb_KFold.prob, cat_KFold.prob])\n",
    "np.corrcoef(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "6bb8edcc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-12-28T08:35:41.459877Z",
     "start_time": "2021-12-28T08:35:40.812472Z"
    }
   },
   "outputs": [],
   "source": [
    "sub = xgb_1.copy()\n",
    "# sub.drop(['origin'], axis=1, inplace=True)\n",
    "\n",
    "sub.prob = 0.7 * lgb_KFold.prob + 0.2 * xgb_KFold.prob + 0.1 * cat_KFold.prob  # Online test score:0.6837613\n",
    "sub.to_csv('sbms_xgb_cat_xK_cK.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "position": {
    "height": "291.844px",
    "left": "1344px",
    "right": "20px",
    "top": "75px",
    "width": "449px"
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
